const express = require('express');
const router = express.Router();
const { getAvailableSlots } = require('./calendarService');
require('dotenv').config();

const { OpenAI } = require('openai');
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

router.post('/', async (req, res) => {
  const { call_id, message } = req.body;

  // üîé Si l'utilisateur demande les disponibilit√©s
  if (message.toLowerCase().includes("disponible")) {
    const slots = await getAvailableSlots();
    const formatted = slots.map(slot =>
      `${slot.date} √† ${slot.hour}`
    ).slice(0, 3).join(', ');

    return res.json({
      response: `Voici les prochains cr√©neaux disponibles : ${formatted}. Voulez-vous r√©server l‚Äôun d‚Äôeux ?`,
      end_call: false,
    });
  }

  // ü§ñ Sinon, r√©ponse via OpenAI
  try {
   const completion = await openai.chat.completions.create({
  model: "gpt-3.5-turbo",
  messages: [
    {
      role: "system",
      content: "Tu es un assistant vocal pour un centre de remise en forme. Ta mission est de r√©pondre aux questions des clients sur les horaires, les services propos√©s, les coachs disponibles, et la prise de rendez-vous. Tu dois √™tre poli, clair, et orient√© solution.",
    },
    {
      role: "user",
      content: message,
    }
  ],
  temperature: 0.7,
});

    const aiResponse = completion.choices[0].message.content;

    return res.json({
      response: aiResponse,
      end_call: false,
    });
  } catch (error) {
    console.error("‚ùå OpenAI error:", error);
    return res.json({
      response: "D√©sol√©, une erreur s'est produite. Pouvez-vous r√©p√©ter ?",
      end_call: false,
    });
  }
});


router.post('/test-reservation', async (req, res) => {
  const { createClient } = require('@supabase/supabase-js');
  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
  );

  const { call_id, first_name, email, service_type, date, hour } = req.body;

  // ‚úÖ V√©rifier que le cr√©neau est bien disponible dans la table agenda
  const { data: existing, error: checkError } = await supabase
    .from('agenda')
    .select('*')
    .eq('date', date)
    .eq('hour', hour)
    .eq('is_booked', false);

  if (checkError) {
    console.error("‚ùå Erreur lors de la v√©rification du cr√©neau:", checkError);
    return res.status(500).json({ error: "Erreur lors de la v√©rification du cr√©neau", details: checkError });
  }

  if (!existing.length) {
    return res.status(400).json({ error: "Cr√©neau non disponible" });
  }

  // ‚úÖ Ins√©rer la r√©servation dans la table reservations
  const { data, error } = await supabase
    .from('reservations')
    .insert([
      {
        call_id,
        first_name,
        email,
        service_type,
        date,
        hour
      }
    ]);

  if (error) {
    console.error('‚ùå INSERT ERROR:', error);
    return res.status(500).json({ error: "Insert failed", details: error });
  }

  // ‚úÖ Mettre √† jour le cr√©neau comme r√©serv√©
  await supabase
    .from('agenda')
    .update({ is_booked: true })
    .eq('date', date)
    .eq('hour', hour);

  return res.json({ success: true, data });
});

module.exports = router;
